{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","isChange","event","query","target","value","setState","prevState","filteredData","data","filter","element","Country","toLowerCase","includes","state","global","axios","get","then","res","Countries","Global","this","className","style","marginTop","onChange","type","placeholder","Table","striped","bordered","hover","responsive","TotalConfirmed","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","map","item","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wUA2GeA,G,wDApGX,aAAe,IAAD,8BACV,gBAWJC,SAAW,SAACC,GACV,IAAMC,EAAQD,EAAME,OAAOC,MAE3B,EAAKC,UAAS,SAAAC,GACZ,IAAMC,EAAeD,EAAUE,KAAKC,QAAO,SAAAC,GACzC,OAAOA,EAAQC,QAAQC,cAAcC,SAASX,EAAMU,kBAGtD,MAAO,CACLV,QACAK,oBAnBF,EAAKO,MAAQ,CACTN,KAAM,GACND,aAAc,GACdL,MAAO,GACPa,OAAQ,IAPF,E,qMA4BNC,IAAMC,IAAI,sCACfC,MAAK,SAACC,GACL,IAAMX,EAAOW,EAAIX,KAAKY,UAChBL,EAASI,EAAIX,KAAKa,OAChBnB,EAAU,EAAKY,MAAfZ,MACFK,EAAeC,EAAKC,QAAO,SAAAC,GAC/B,OAAOA,EAAQC,QAAQC,cAAcC,SAASX,EAAMU,kBAEtD,EAAKP,SAAS,CAAEG,OAAMO,SAAQR,oB,gIAMxB,IAAD,EAC0Be,KAAKR,MAA5BC,EADH,EACGA,OAAOR,EADV,EACUA,aAEf,OAEQ,yBAAKgB,UAAU,aACX,yBAAKA,UAAU,eACX,wBAAIC,MAAO,CAACC,UAAW,KAAvB,uBAEE,yBAAKF,UAAU,cACX,6BACI,2BAAOnB,MAASkB,KAAKR,MAAMZ,MAAOwB,SAAUJ,KAAKtB,SAAU2B,KAAK,OAAOJ,UAAU,eAAeK,YAAY,aAItH,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,WAAW,MACvC,+BACE,4BACE,uCACA,2CACA,yCACA,4CACA,0CACA,iDAGJ,+BACE,4BACE,sCACA,4BAAKlB,EAAOmB,gBACZ,4BAAK,IAAMnB,EAAOoB,cAClB,4BAAKpB,EAAOqB,aACZ,4BAAK,IAAMrB,EAAOsB,WAClB,4BAAKtB,EAAOuB,iBAGb/B,EAAagC,KAAI,SAACC,EAAKC,GAEtB,OAAO,wBAAIA,IAAOA,GACV,4BAAKD,EAAK7B,SACV,4BAAK6B,EAAKN,gBACV,4BAAK,IAAMM,EAAKL,cAChB,4BAAKK,EAAKJ,aACV,4BAAK,IAAMI,EAAKH,WAChB,4BAAKG,EAAKF,uBAO5B,kC,GA9FFI,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.80ad71fc.chunk.js","sourcesContent":["import axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Table from 'react-bootstrap/Table';\nimport './App.css';\n\nclass App extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            data: [],\n            filteredData: [],\n            query: \"\",\n            global: {},\n        }\n\n    }\n\n    isChange = (event) => {\n      const query = event.target.value;\n\n      this.setState(prevState => {\n        const filteredData = prevState.data.filter(element => {\n          return element.Country.toLowerCase().includes(query.toLowerCase());\n        });\n  \n        return {\n          query,\n          filteredData\n        };\n      });\n    }\n\n    async componentDidMount() {\n      await axios.get('https://api.covid19api.com/summary')\n      .then((res) => {\n        const data = res.data.Countries\n        const global = res.data.Global\n        const { query } = this.state;\n        const filteredData = data.filter(element => {\n          return element.Country.toLowerCase().includes(query.toLowerCase());\n        });\n        this.setState({ data, global, filteredData})\n        \n      })\n      \n    }\n\n    render() {\n        const { global,filteredData} = this.state\n        \n        return (\n            \n                <div className=\"container\">\n                    <div className=\"text-center\">\n                        <h1 style={{marginTop: 50}}>COVID-19 Statistics</h1>\n\n                          <div className=\"form-group\">\n                              <div >\n                                  <input value = {this.state.query} onChange={this.isChange} type=\"text\" className=\"form-control\" placeholder=\"Search\" />                   \n                              </div>\n                            \n                          </div>  \n                        <Table striped bordered hover responsive=\"xl\" >\n                          <thead>\n                            <tr>\n                              <th>Country</th>\n                              <th>Total Cases</th>\n                              <th>New Cases</th>\n                              <th>Total Deaths</th>\n                              <th>New Deaths</th>\n                              <th>Total Recovered</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr>\n                              <td>Global</td>\n                              <td>{global.TotalConfirmed}</td>\n                              <td>{'+' + global.NewConfirmed}</td>\n                              <td>{global.TotalDeaths}</td>\n                              <td>{'+' + global.NewDeaths}</td>\n                              <td>{global.TotalRecovered}</td>\n                            </tr>\n\n                            {filteredData.map((item,key) => {\n                              \n                              return <tr key = {key}>\n                                      <td>{item.Country}</td>\n                                      <td>{item.TotalConfirmed}</td>\n                                      <td>{'+' + item.NewConfirmed}</td>\n                                      <td>{item.TotalDeaths}</td>\n                                      <td>{'+' + item.NewDeaths}</td>\n                                      <td>{item.TotalRecovered}</td>\n                            </tr>\n                          \n                            })}\n                          </tbody>\n                        </Table>\n                    </div>\n                    <hr />\n                </div>\n            \n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}